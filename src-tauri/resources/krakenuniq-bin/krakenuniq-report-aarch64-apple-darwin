#!/usr/bin/env perl

# Original file Copyright 2013-2015, Derrick Wood <dwood@cs.jhu.edu>
# Portions (c) 2017-2018, Florian Breitwieser <fbreitwieser@jhu.edu> as part of KrakenUniq
#
# This file is part of the KrakenUniq taxonomic sequence classification system.
#
# Kraken is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Kraken is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kraken.  If not, see <http://www.gnu.org/licenses/>.

# Reports a summary of Kraken's results.
# Note that this should be only a fall-back - the resulting file will not include
#  kmer-counts provided in the file produced by the `krakenuniq --report-file` command

use strict;
use warnings;
use File::Basename;
use Getopt::Long;

my $PROG = basename $0;
my $KRAKEN_DIR = "/Users/nik/krakenuniq-1.0.4/install";

# Test to see if the executables got moved, try to recover if we can
if (! -e "$KRAKEN_DIR/classify") {
  use Cwd 'abs_path';
  $KRAKEN_DIR = dirname abs_path($0);
}

require "$KRAKEN_DIR/krakenlib.pm";

my $show_zeros = 0;
my $db_prefix;
my $is_cnts_table = 0;
my $is_taxon_list = 0;

GetOptions(
  "help" => \&display_help,
  "version" => \&display_version,
  "show-zeros" => \$show_zeros,
  "taxon-counts" => \$is_cnts_table,
  "taxon-list" => \$is_taxon_list,
  "db=s" => \$db_prefix,
);

eval { $db_prefix = krakenlib::find_db($db_prefix); };
if ($@) {
  print STDERR "$PROG: $@\n";
  usage(1);
}

if ($is_cnts_table && $is_taxon_list) {
  die "Specify either --taxon-counts or --taxon-list, not both! See -h for help.\n";
}

sub usage {
  my $exit_code = @_ ? shift : 64;
  print STDERR "Usage: $PROG --db KRAKEN_DB_NAME [OPTIONS] <kraken output file(s)>

OPTIONS:
  --show-zeros    Show full taxonomy table.
  --taxon-counts  Input files are in the format '<taxon ID><tab><count>' instead of Kraken output.
  --taxon-list    Input files is list of taxon IDs instead of Kraken output.
  -h              This message.
  
This script should only be used when post-processing raw KrakenUniq output, and k-mer counts and coverages are not needed. For most use-cases, krakenuniq --report-file is better than krakenuniq-report. \n";
  my $default_db;
  eval { $default_db = krakenlib::find_db(); };
  if (defined $default_db) {
    print STDERR "\n   Default database is \"$default_db\"\n";
  }
  exit $exit_code;
}

sub display_help {
  usage(0);
}

sub display_version {
  print "KrakenUniq version 1.0.4\n";
  print "Copyright 2017-2018, Florian Breitwieser (fbreitwieser\@jhu.edu)\n";
  print "Copyright 2013-2017, Derrick Wood (dwood\@cs.jhu.edu) for Kraken\n";
  exit 0;
}

my (%child_lists, %name_map, %rank_map);
load_taxonomy($db_prefix);

my %taxo_counts;
my $seq_count = 0;
$taxo_counts{0} = 0;
if ($is_cnts_table) {
  while (<>) {
    chomp;
    my ($taxid, $count) = split;
    $count = 1 unless defined $count;
    $taxo_counts{$taxid} += $count;
    $seq_count += $count;
  }
} elsif ($is_taxon_list) {
  while (<>) {
    chomp;
    foreach my $taxid (split) {
      ++$taxo_counts{$taxid};
      ++$seq_count;

    }
  }
} else {
  while (<>) {
    my (undef, undef, $taxid) = split /\t/;
    $taxo_counts{$taxid}++;
    $seq_count++;
  }
}

while (my ($k, $v) = each %taxo_counts) {
  print STDERR "Taxon $k is not in taxonomy tables - ignoring it.\n" unless defined $name_map{$k};
}
my $classified_count = $seq_count - $taxo_counts{0};

my %clade_counts = %taxo_counts;
dfs_summation(1);

for (keys %name_map) {
  $clade_counts{$_} ||= 0;
}

printf "%6.2f\t%d\t%d\t%s\t%d\t%s%s\n",
  $clade_counts{0} * 100 / $seq_count,
  $clade_counts{0}, $taxo_counts{0}, "U",
  0, "", "unclassified";
dfs_report(1, 0);

sub dfs_report {
  my $node = shift;
  my $depth = shift;
  if (! $clade_counts{$node} && ! $show_zeros) {
    return;
  }
  printf "%6.2f\t%d\t%d\t%s\t%d\t%s%s\n",
    ($clade_counts{$node} || 0) * 100 / $seq_count,
    ($clade_counts{$node} || 0),
    ($taxo_counts{$node} || 0),
    rank_code($rank_map{$node}),
    $node,
    "  " x $depth,
    $name_map{$node};
  my $children = $child_lists{$node};
  if ($children) {
    my @sorted_children = sort { $clade_counts{$b} <=> $clade_counts{$a} } @$children;
    for my $child (@sorted_children) {
      dfs_report($child, $depth + 1);
    }
  }
}

sub rank_code {
  my $rank = shift;
  for ($rank) {
    $_ eq "species" and return "S";
    $_ eq "genus" and return "G";
    $_ eq "family" and return "F";
    $_ eq "order" and return "O";
    $_ eq "class" and return "C";
    $_ eq "phylum" and return "P";
    $_ eq "kingdom" and return "K";
    $_ eq "superkingdom" and return "D";
  }
  return "-";
}

sub dfs_summation {
  my $node = shift;
  my $children = $child_lists{$node};
  if ($children) {
    for my $child (@$children) {
      dfs_summation($child);
      $clade_counts{$node} += ($clade_counts{$child} || 0);
    }
  }
}

sub load_taxonomy {
  my $prefix = shift;
  print STDERR "Reading taxonomy ...";
  open(my $TAXDB, "<", "$prefix/taxDB") or die "Error opening $prefix/taxDB: $!";
  while (<$TAXDB>) {
    chomp;
    my ($taxID, $parentTaxID, $taxName, $taxRank) = split(/\t/);
    $name_map{$taxID} = $taxName;
    push @{ $child_lists{$parentTaxID} }, $taxID unless $parentTaxID == $taxID;
    $rank_map{$taxID} = $taxRank;
  }
  close($TAXDB);
  print STDERR " done.\n";
}
# vim: tabstop=8 expandtab tabstop=2 shiftwidth=2 :
