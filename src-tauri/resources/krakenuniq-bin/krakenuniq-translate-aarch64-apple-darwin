#!/usr/bin/env perl

# Copyright 2013-2015, Derrick Wood <dwood@cs.jhu.edu>
# Portions (c) 2017-2018, Florian Breitwieser <fbreitwieser@jhu.edu> as part of KrakenUniq
#
# This file is part of the KrakenUniq taxonomic sequence classification system.
#
# Kraken is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Kraken is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kraken.  If not, see <http://www.gnu.org/licenses/>.

# For each classified read, prints sequence ID and full taxonomy

use strict;
use warnings;
use File::Basename;
use Getopt::Long;

my $PROG = basename $0;
my $KRAKEN_DIR = "/Users/nik/krakenuniq-1.0.4/install";

# Test to see if the executables got moved, try to recover if we can
if (! -e "$KRAKEN_DIR/classify") {
  use Cwd 'abs_path';
  $KRAKEN_DIR = dirname abs_path($0);
}

require "$KRAKEN_DIR/krakenlib.pm";

my $db_prefix;
my $mpa_format = 0;

GetOptions(
  "help" => \&display_help,
  "version" => \&display_version,
  "db=s" => \$db_prefix,
  "mpa-format" => \$mpa_format
);

eval { $db_prefix = krakenlib::find_db($db_prefix); };
if ($@) {
  die "$PROG: $@";
}

sub usage {
  my $exit_code = @_ ? shift : 64;
  print STDERR "Usage: $PROG [--db KRAKEN_DB_NAME] [--mpa-format] <kraken output file(s)>\n";
  my $default_db;
  eval { $default_db = krakenlib::find_db(); };
  if (defined $default_db) {
    print STDERR "\n   Default database is \"$default_db\"\n";
  }
  exit $exit_code;
}

sub display_help {
  usage(0);
}

sub display_version {
  print "KrakenUniq version 1.0.4\n";
  print "Copyright 2017-2018, Florian Breitwieser (fbreitwieser\@jhu.edu)\n";
  print "Copyright 2013-2017, Derrick Wood (dwood\@cs.jhu.edu) for Kraken\n";
  exit 0;
}

my (%parent_map, %name_map, %rank_map);
load_taxonomy($db_prefix);
my %known_taxonomy_strings;

while (<>) {
  next unless /^C/;
  chomp;
  my @fields = split;
  my ($seqid, $taxid) = @fields[1,2];
  my $taxonomy_str = get_taxonomy_str($taxid);
  print "$seqid\t$taxonomy_str\n";
}

sub get_taxonomy_str {
  my $taxid = shift;
  if (! exists $known_taxonomy_strings{$taxid}) {
    my @nodes;
    while (defined $parent_map{$taxid}) {
      if ($mpa_format) {
        my $rank_code = rank_code($rank_map{$taxid});
        my $name = $name_map{$taxid};
        $name =~ tr/ /_/;
        unshift @nodes, lc($rank_code) . "__" . $name if $rank_code ne "-";
      }
      else {
        unshift @nodes, $name_map{$taxid};
      }
      $taxid = $parent_map{$taxid};
    }
    if ($mpa_format) {
      $known_taxonomy_strings{$taxid} = @nodes ? join("|", @nodes) : "root";
    }
    else {
      $known_taxonomy_strings{$taxid} = join(";", @nodes);
    }
  }
  return $known_taxonomy_strings{$taxid};
}

sub rank_code {
  my $rank = shift;
  for ($rank) {
    $_ eq "species" and return "S";
    $_ eq "genus" and return "G";
    $_ eq "family" and return "F";
    $_ eq "order" and return "O";
    $_ eq "class" and return "C";
    $_ eq "phylum" and return "P";
    $_ eq "kingdom" and return "K";
    $_ eq "superkingdom" and return "D";
  }
  return "-";
}


sub load_taxonomy {
  my $prefix = shift;
  print STDERR "Reading taxonomy ...";
  open(my $TAXDB, "<", "$prefix/taxDB") or die "Error opening $prefix/taxDB: $!";
  while (<$TAXDB>) {
    chomp;
    my ($taxID, $parentTaxID, $taxName, $taxRank) = split(/\t/);
    $name_map{$taxID} = $taxName;
    $parent_map{$taxID} = $parentTaxID unless $parentTaxID == $taxID;
    $rank_map{$taxID} = $taxRank;
  }
  close($TAXDB);
  print STDERR " done.\n";
}

# vim: tabstop=8 expandtab tabstop=2 shiftwidth=2 :
